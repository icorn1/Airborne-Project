# the first version of a UR script that accounts for the communication between the PC and the UR.

# this function does the following:
#  open socket,
#  send a ply_ID,
#  read coordinates and error_code,
#  if no error:
#   send succesful,
#   close socket,
#   move to location of ply
#  if error:
#   go to GUI and say that there is no ply or something

def server_program():
 port = 50003  # choose any free port

 if socket_open("192.168.0.100", port) == True:
  socket_send_string(ply_ID)
  data = socket_read_ascii_float(5, "socket_0")
  #sleep(1)

  if data[4] == 0:

   socket_send_string("succesful")
   textmsg(str_cat("error_code: ", data[4]))
   text = p[data[1]/1000, data[2]/1000, z, data[3], data[4], Rz]
   textmsg("position: ", text)
   
   ply_location  = p[data[1]/1000, data[2]/1000, z, data[3], data[4], Rz]
   move_down     = p[0,0,0.1,0,0,0]
   move_up       = p[0,0,-0.1,0,0,0]
   composite_loc = p[-0.4,0.5,0.1,3.14,0,0]

   movej(ply_location)
   movej(pose_trans(ply_location, move_down))
   socket_send_string("activate")
   sleep(0.3)
   movej(ply_location)

   socket_close("socket_0")
  end
  if data[4] == 1:
   textmsg("error_code: 1")
   socket_send_string("unsuccesful")

   # go back to GUI. GUI asks if you need to skip the ply or if you want to select another ply to fill in.
  end
 end
end

# Get variables from GUI
ply_ID = 3

# basic variables
z = 0.150
Rz = 0

# move to start location.
# use function to move to the location of the ply.


# disable the movements while testing sockets
movej(p[-0.400, 0.000, 0.100, 3.14, 0, 0])
server_program()


# lower tool.
# activate the right vacuum cups.
# move up.

# check if ply is attached to the tool end. (with appropriate sensor)
# let sensor send error_code back. (0 if ply attached, 1 if ply not attached)

# move to other table with a variable (speed, orientation, location)
# lower tool.
# deactivate vacuum cups
# move up.
# move to start location.
# check is composite is allright with second camera.

halt
