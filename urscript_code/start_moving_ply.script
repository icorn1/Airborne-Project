# Discription to function start_moving_ply()
# This function opens a connection to Host, this is the PC used. It sends the command 
# "moving" to the PC so that the PC knows which function is being run. The ply ID is
# send to the PC. The PC will send the location of the ply with the right ply ID back.
# If the ply is not found, an error_code of 1 is returned by the PC and the UR will go
# to the GUI and there it will ask if you want to skip the ply or chose a new one to fill
# the place of the missing ply. when the robot is at the ply (error_code = 0) it will
# send a command to the PC to activate the tool end, which consists of vacu√ºm cups.
# After this the robot moves to where the composite should be build.

def start_moving_ply():
 if socket_open("192.168.0.100", port) == True:
  socket_send_string("moving")

  socket_send_string(ply_ID)
  data = socket_read_ascii_float(5, "socket_0")

  if data[5] == 0:
   textmsg(str_cat("error_code: ", data[5]))
   
   ply_location  = p[data[1], data[2], z, data[3], data[4], Rz]
   move_down     = p[0,0,0.1,0,0,0]
   move_up       = p[0,0,-0.1,0,0,0]
   composite_loc = p[-0.4,0.5,0.2,3.14,0,0]
   
   textmsg("position: ", ply_location)
   movej(ply_location)
   movej(pose_trans(ply_location, move_down))
   socket_send_string("activate")
   sleep(0.3)
   movej(ply_location)
   movej(composite_loc)
   socket_send_string("Deactivate")
  end

  if data[5] == 1:
   textmsg("error_code: 1")
   # go back to GUI. GUI asks if you need to skip the ply or if you want to select another ply to fill in.
  end
  socket_close("socket_0")
 end
end

# Discription to start_location()
# move the robot to the start location.

def start_location():
 movej(p[-0.400, 0.000, 0.100, 3.14, 0, 0])
end

# Get variables from GUI
ply_ID = 3
port = 50003

# basic variables
z = 0.100
Rz = 0
Rx = 3.14

start_location()
start_moving_ply()
halt
