# Run this code to turn on all of the hardware connected to the robot and to initialise the variables.
# Keep the sleep() or else the robot might give an error when moving on from digital output 2.
# In the set_standard_analog_out(0, 0.3) statement 0.3 can be changed from 0 to 1 to adjust the brightness of the lamp.

def Initialise():
  set_standard_analog_out(0, 0.3)
  set_standard_analog_out(1, 0.0)
  set_standard_digital_out(0, True)
  set_standard_digital_out(1, True)
  set_standard_digital_out(3, True)
  set_standard_digital_out(2, True)
  sleep(1)
  set_standard_digital_out(4, True)
  set_standard_digital_out(5, True)
  set_standard_digital_out(6, True)
  set_standard_digital_out(7, True)
 
  global START_LOC = p[-0.100, -0.450, 0.300, 0, 3.14, 0]  
  global SAFETY_POS = p[0.485, -0.270, 0.300, 0, 3.14, 0]
  global MOVE_DOWN = p[0,0,0.120,0,0,0]
  global MOVE_UP   = p[0,0,-0.120,0,0,0]
  global IP_HOST = "192.168.0.11"
  global PORT = 50001
  global PLY_ID = 3
  global Z_HEIGHT = 0.300  # in meters
  movej(START_LOC)
 end

 
 
 # Discription to function calibration()
 # The function opens a connection to Host, this is the PC used. It sends the command 
 # "clibration" to the PC so that the PC knows which function is being run. The function 
 # gets an error code 0 or 1 from the PC, 0 means that a new pose can be send by the PC,
 # 1 means that no poses can be send, this happens when all poses have been done already 
 # and the calibration is finished. If the error code is 0 the robot will move to the 
 # pose it gets from the PC and then send to the PC that the PC can make a picture. The 
 # robot waits for a while to give time to the PC to make the picture.
 
 def calibration():

    # Start a while loop that finishes when the calibration is done.
    while socket_open(IP_HOST, PORT) == True:
     socket_send_string("calibration")
     error = socket_read_ascii_float(1, "socket_0")

     # When the calibration is finished on the PC it will send an error = 1 through the socket and the robot will end calibration().
     if error[1] == 1:
      socket_close("socket_0")
      break
     end

     # The robot moves to the position the PC requires the robot to be.
     # The robot waits during the sleep() so that the PC can make a picture with the camera. 
     # As long as error = 0 the calibration() is continued.
     if error[1] == 0:
      data = socket_read_ascii_float(6, "socket_0")
      calibration_location = p[data[1], data[2], data[3], data[4], data[5], data[6]]
      movel(calibration_location)
      socket_send_string("ready for picture")
      sleep(6)
      socket_close("socket_0")
     end
    end
 end
 
 
 
 # Discription to function start_moving_ply()
 # This function opens a connection to Host, this is the PC used. It sends the command 
 # "moving" to the PC so that the PC knows which function is being run. The laminate ID is
 # send to the PC (the laminate ID is given by the GUI). The PC will search the first ply.
 # If the ply is not found or is placed wrongly, error code 2, 3, or 4 is received and a pop-up 
 # will appear on the GUI.
 # Error code = 2: a detected ply has been labelled as wrong.
 # Error code = 3: no ply's have been detected on the table.
 # Error code = 4: ply's are placed out of the reach of the robot.

 # If the ply is found, error code 0 is received, the coordinates of 
 # the ply and composite locations are read and the robot moves to this location. It picks 
 # up the ply using the vacu√ºm system. The sensor is read to check if the ply is attached.
 # If there is no ply detected the robot will ask the user to place the ply differently again.
 # If the ply is attached it moves on to build the composite. When the composite is build an
 # error code 1 is received and the function is ended.

 
 def move_ply(laminate_id):
   if socket_open(IP_HOST, PORT) == True:
     socket_send_string("moving")
     sleep(0.1)
     socket_send_string(laminate_id)
 
     while True:

       # The robot receives error codes depending on what needs to happen or what went wrong.
       # Here is a short discription of the error codes and what they mean:
       # Error code 0: The ply is detected succesfuly and there is no problem.
       # Error code 1: The laminate is finished.
       # Error code 2: The correct ply was not detected.
       # Error code 3: No plies have been detected on the table
       # Error code 4: Ply out of reach

       response_code = socket_read_ascii_float(1, "socket_0", 20)
       if response_code[1] == 0:
         data  = socket_read_ascii_float(7, "socket_0", 20)
 
         ply_loc  = p[data[1], data[2], Z_HEIGHT, 0, 3.14, 0]               
         com_loc  = p[data[4], data[5], Z_HEIGHT, 0, 3.14, 0]   

         movej(ply_loc)
         movej(pose_trans(ply_loc, p[0, 0, 0, 0, 0, data[3]]))
         socket_send_string("activate unused")
         movel(pose_trans(get_actual_tcp_pose(), MOVE_DOWN))
         socket_send_string("activate used")
         sleep(0.3)
         movel(pose_trans(get_actual_tcp_pose(), MOVE_UP))
         sensor = get_standard_analog_in(1)
 
         # There is a ply attached
         if sensor < 0.1:
           if data[7] == 1:
             movej(SAFETY_POS)
           end
           movej(START_LOC)
           movej(com_loc)
           movej(pose_trans(get_actual_tcp_pose(), p[0, 0, 0, 0, 0, data[6]]))
           movel(pose_trans(get_actual_tcp_pose(), p[0, 0, .120, 0, 0, 0]))            
           socket_send_string("Deactivate")
           socket_send_string("3")
           textmsg("succesful pickup")
           sleep(0.3)
           movel(pose_trans(get_actual_tcp_pose(), MOVE_UP))
           movej(pose_trans(get_actual_tcp_pose(), p[0, 0, 0, 0, 0, -data[6]])) 
           movej(START_LOC)
 
         # There is no ply attached
         elif sensor > 0.1:
           socket_send_string("Deactivate")
           movej(START_LOC)
           socket_send_string("4")
           popup("Failed to pick up the ply. Try moving the ply to a different location, or turning the air valve on.", "Failed to pick up the ply", error=True, blocking=True)
           socket_send_string("continue")
         end
 
       elif response_code[1] == 1:
         textmsg("Laminate finished")
         break
 
       # Error control
       elif response_code[1] == 2:
         popup("The correct ply was not detected. Please submit the requiered plies", "Incorrect ply submitted ", error=True, blocking=True)
         socket_send_string("continue")
       
       elif response_code[1] == 3:
         popup ("No plies have been detected on the table. Are there plies on the table? Is the light on?", "No plies found", error=True, blocking=True)
         socket_send_string("continue")

       elif response_code[1] == 4:
         popup("One (or more) ply(ies) are out of the robot reach or might cause a collition with enviornment", "Ply out of reach", error=True, blocking=True)
         socket_send_string("continue")
       end
     end
     socket_close("socket_0")
   end
 end
  
 
 # WARNING: DO NOT UNCOMMENT.
 # These functions are manually for the code to run in src/TestInstallationNodeContribution.
 
 # Initialise()
 # calibration()
 # move_ply()
 # De_initialise()
